#!/bin/bash

##############################################################
# This script runs cp directly with all parameters called
# except param -B which does not exist in cp.
# This param indicates that you want a progressbar displayed
# Please note that this will only work with the param as
# a single value (eg. cp -r -B a b)
# It will not work if you combine it with others (eg. cp -Br a b)
#
#
# Restrictions of usage:
# WORK FOR THIS SCRIPT IS STILL IN PROGRESS!
# This scipt will only work with one folder/file as src
# multiple files/folders as in cp a b c d z will only display
# the progress of the last file in the param list (in this case d)
############################################################
set -e

#usage:
#for x in {1..100} ; do
#    prog "$x" progress
#    sleep .1
#done ; echo
function prog() {
    local w=80 p=$1;  shift
    # create a string of spaces, then change them to dots
    printf -v dots "%*s" "$(( $p*$w/100 ))" ""; dots=${dots// /.};
    # print those dots on a fixed-width space plus the percentage etc.
    printf "\r\e[K|%-*s| %3d %% %s" "$w" "$dots" "$p" "$*";
}

function checkAndDie() {
  check="$1"
  [[ "$check" == "" ]] && echo -e "FATAL! Could not get size of $2 folder!" && exit 2
  return 0
}

# we trap interruptions so the actual cp process can get killed, too.
# however we cannot trap SIGKILL so if this script gets terminated by kill -9 the cp subprocess will remain
trap "exit" INT TERM
trap "kill 0" EXIT

#filter -B out of the params
for param; do
    [[ $param != "-B" ]] && newparams+=("$param")
done

#if newparams and original params are identical, -B is not in params
if [[ "$@" == "${newparams[*]}" ]]; then
  cp "$@"
  exit $?
fi

set -- "${newparams[@]}"
cp "$@" &

#get pid of last cp started. We use this so this script can also be used to get the progress of a cp job which was not started by the script itself
pid=$(ps ax | grep -iw "cp" | grep -v grep | cut -dp -f1 | sed s'/\ //g' | sed -n '$p')
#if we cannot get the pid, cp must have crashed and printed to stderr. So user already know what's happening - exit
[[ "$pid" == "" ]] && exit 2

name="cp $@"

#src folder is the second last param for cp
src="${@:(-2):1}"
src_size=$(du -b "$src" | tail -n1 | awk '{print $1'})
checkAndDie $src_size source
one_percent=$(($src_size/100))

while [[ -d "/proc/$pid/" ]]; do

  dest_size=$(cat /proc/$pid/io | grep -w write_bytes | cut -d\  -f2)
  checkAndDie $dest_size destination
  prog $(($dest_size/one_percent)) $name
  sleep .1s

done

echo && exit 0
